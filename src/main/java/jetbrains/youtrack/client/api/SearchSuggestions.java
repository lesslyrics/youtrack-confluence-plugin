/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents the list of search suggestions for the currently entered search query.
 */
@Schema(description = "Represents the list of search suggestions for the currently entered search query.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
})

public class SearchSuggestions {
  @JsonProperty("caret")
  private Integer caret = null;

  @JsonProperty("ignoreUnresolvedSetting")
  private Boolean ignoreUnresolvedSetting = null;

  @JsonProperty("query")
  private String query = null;

  @JsonProperty("suggestions")
  private List<Suggestion> suggestions = null;

  @JsonProperty("folders")
  private List<IssueFolder> folders = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

  public SearchSuggestions caret(Integer caret) {
    this.caret = caret;
    return this;
  }

   /**
   * Get caret
   * @return caret
  **/
  @Schema(description = "")
  public Integer getCaret() {
    return caret;
  }

  public void setCaret(Integer caret) {
    this.caret = caret;
  }

  public SearchSuggestions ignoreUnresolvedSetting(Boolean ignoreUnresolvedSetting) {
    this.ignoreUnresolvedSetting = ignoreUnresolvedSetting;
    return this;
  }

   /**
   * Get ignoreUnresolvedSetting
   * @return ignoreUnresolvedSetting
  **/
  @Schema(description = "")
  public Boolean isIgnoreUnresolvedSetting() {
    return ignoreUnresolvedSetting;
  }

  public void setIgnoreUnresolvedSetting(Boolean ignoreUnresolvedSetting) {
    this.ignoreUnresolvedSetting = ignoreUnresolvedSetting;
  }

  public SearchSuggestions query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @Schema(description = "")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

   /**
   * Get suggestions
   * @return suggestions
  **/
  @Schema(description = "")
  public List<Suggestion> getSuggestions() {
    return suggestions;
  }

  public SearchSuggestions folders(List<IssueFolder> folders) {
    this.folders = folders;
    return this;
  }

  public SearchSuggestions addFoldersItem(IssueFolder foldersItem) {
    if (this.folders == null) {
      this.folders = new ArrayList<IssueFolder>();
    }
    this.folders.add(foldersItem);
    return this;
  }

   /**
   * Get folders
   * @return folders
  **/
  @Schema(description = "")
  public List<IssueFolder> getFolders() {
    return folders;
  }

  public void setFolders(List<IssueFolder> folders) {
    this.folders = folders;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchSuggestions searchSuggestions = (SearchSuggestions) o;
    return Objects.equals(this.caret, searchSuggestions.caret) &&
        Objects.equals(this.ignoreUnresolvedSetting, searchSuggestions.ignoreUnresolvedSetting) &&
        Objects.equals(this.query, searchSuggestions.query) &&
        Objects.equals(this.suggestions, searchSuggestions.suggestions) &&
        Objects.equals(this.folders, searchSuggestions.folders) &&
        Objects.equals(this.id, searchSuggestions.id) &&
        Objects.equals(this.$type, searchSuggestions.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caret, ignoreUnresolvedSetting, query, suggestions, folders, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchSuggestions {\n");
    
    sb.append("    caret: ").append(toIndentedString(caret)).append("\n");
    sb.append("    ignoreUnresolvedSetting: ").append(toIndentedString(ignoreUnresolvedSetting)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    suggestions: ").append(toIndentedString(suggestions)).append("\n");
    sb.append("    folders: ").append(toIndentedString(folders)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
