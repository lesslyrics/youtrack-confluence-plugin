/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents list of command and related comment in YouTrack. Can be used to either apply a command or get command suggestions.
 */
@Schema(description = "Represents list of command and related comment in YouTrack. Can be used to either apply a command or get command suggestions.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
})

public class CommandList {
  @JsonProperty("comment")
  private String comment = null;

  @JsonProperty("visibility")
  private CommandVisibility visibility = null;

  @JsonProperty("query")
  private String query = null;

  @JsonProperty("caret")
  private Integer caret = null;

  @JsonProperty("silent")
  private Boolean silent = null;

  @JsonProperty("usesMarkdown")
  private Boolean usesMarkdown = null;

  @JsonProperty("runAs")
  private String runAs = null;

  @JsonProperty("commands")
  private List<ParsedCommand> commands = null;

  @JsonProperty("issues")
  private List<Issue> issues = null;

  @JsonProperty("suggestions")
  private List<Suggestion> suggestions = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

  public CommandList comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @Schema(description = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public CommandList visibility(CommandVisibility visibility) {
    this.visibility = visibility;
    return this;
  }

   /**
   * Get visibility
   * @return visibility
  **/
  @Schema(description = "")
  public CommandVisibility getVisibility() {
    return visibility;
  }

  public void setVisibility(CommandVisibility visibility) {
    this.visibility = visibility;
  }

  public CommandList query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @Schema(description = "")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public CommandList caret(Integer caret) {
    this.caret = caret;
    return this;
  }

   /**
   * Get caret
   * @return caret
  **/
  @Schema(description = "")
  public Integer getCaret() {
    return caret;
  }

  public void setCaret(Integer caret) {
    this.caret = caret;
  }

  public CommandList silent(Boolean silent) {
    this.silent = silent;
    return this;
  }

   /**
   * Get silent
   * @return silent
  **/
  @Schema(description = "")
  public Boolean isSilent() {
    return silent;
  }

  public void setSilent(Boolean silent) {
    this.silent = silent;
  }

  public CommandList usesMarkdown(Boolean usesMarkdown) {
    this.usesMarkdown = usesMarkdown;
    return this;
  }

   /**
   * Get usesMarkdown
   * @return usesMarkdown
  **/
  @Schema(description = "")
  public Boolean isUsesMarkdown() {
    return usesMarkdown;
  }

  public void setUsesMarkdown(Boolean usesMarkdown) {
    this.usesMarkdown = usesMarkdown;
  }

  public CommandList runAs(String runAs) {
    this.runAs = runAs;
    return this;
  }

   /**
   * Get runAs
   * @return runAs
  **/
  @Schema(description = "")
  public String getRunAs() {
    return runAs;
  }

  public void setRunAs(String runAs) {
    this.runAs = runAs;
  }

   /**
   * Get commands
   * @return commands
  **/
  @Schema(description = "")
  public List<ParsedCommand> getCommands() {
    return commands;
  }

  public CommandList issues(List<Issue> issues) {
    this.issues = issues;
    return this;
  }

  public CommandList addIssuesItem(Issue issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<Issue>();
    }
    this.issues.add(issuesItem);
    return this;
  }

   /**
   * Get issues
   * @return issues
  **/
  @Schema(description = "")
  public List<Issue> getIssues() {
    return issues;
  }

  public void setIssues(List<Issue> issues) {
    this.issues = issues;
  }

   /**
   * Get suggestions
   * @return suggestions
  **/
  @Schema(description = "")
  public List<Suggestion> getSuggestions() {
    return suggestions;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommandList commandList = (CommandList) o;
    return Objects.equals(this.comment, commandList.comment) &&
        Objects.equals(this.visibility, commandList.visibility) &&
        Objects.equals(this.query, commandList.query) &&
        Objects.equals(this.caret, commandList.caret) &&
        Objects.equals(this.silent, commandList.silent) &&
        Objects.equals(this.usesMarkdown, commandList.usesMarkdown) &&
        Objects.equals(this.runAs, commandList.runAs) &&
        Objects.equals(this.commands, commandList.commands) &&
        Objects.equals(this.issues, commandList.issues) &&
        Objects.equals(this.suggestions, commandList.suggestions) &&
        Objects.equals(this.id, commandList.id) &&
        Objects.equals(this.$type, commandList.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, visibility, query, caret, silent, usesMarkdown, runAs, commands, issues, suggestions, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommandList {\n");
    
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    caret: ").append(toIndentedString(caret)).append("\n");
    sb.append("    silent: ").append(toIndentedString(silent)).append("\n");
    sb.append("    usesMarkdown: ").append(toIndentedString(usesMarkdown)).append("\n");
    sb.append("    runAs: ").append(toIndentedString(runAs)).append("\n");
    sb.append("    commands: ").append(toIndentedString(commands)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    suggestions: ").append(toIndentedString(suggestions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
