/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Describes sprints configuration.
 */
@Schema(description = "Describes sprints configuration.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
})

public class SprintsSettings {
  @JsonProperty("isExplicit")
  private Boolean isExplicit = null;

  @JsonProperty("cardOnSeveralSprints")
  private Boolean cardOnSeveralSprints = null;

  @JsonProperty("defaultSprint")
  private Sprint defaultSprint = null;

  @JsonProperty("disableSprints")
  private Boolean disableSprints = null;

  @JsonProperty("explicitQuery")
  private String explicitQuery = null;

  @JsonProperty("sprintSyncField")
  private CustomField sprintSyncField = null;

  @JsonProperty("hideSubtasksOfCards")
  private Boolean hideSubtasksOfCards = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

  public SprintsSettings isExplicit(Boolean isExplicit) {
    this.isExplicit = isExplicit;
    return this;
  }

   /**
   * Get isExplicit
   * @return isExplicit
  **/
  @Schema(description = "")
  public Boolean isIsExplicit() {
    return isExplicit;
  }

  public void setIsExplicit(Boolean isExplicit) {
    this.isExplicit = isExplicit;
  }

  public SprintsSettings cardOnSeveralSprints(Boolean cardOnSeveralSprints) {
    this.cardOnSeveralSprints = cardOnSeveralSprints;
    return this;
  }

   /**
   * Get cardOnSeveralSprints
   * @return cardOnSeveralSprints
  **/
  @Schema(description = "")
  public Boolean isCardOnSeveralSprints() {
    return cardOnSeveralSprints;
  }

  public void setCardOnSeveralSprints(Boolean cardOnSeveralSprints) {
    this.cardOnSeveralSprints = cardOnSeveralSprints;
  }

  public SprintsSettings defaultSprint(Sprint defaultSprint) {
    this.defaultSprint = defaultSprint;
    return this;
  }

   /**
   * Get defaultSprint
   * @return defaultSprint
  **/
  @Schema(description = "")
  public Sprint getDefaultSprint() {
    return defaultSprint;
  }

  public void setDefaultSprint(Sprint defaultSprint) {
    this.defaultSprint = defaultSprint;
  }

  public SprintsSettings disableSprints(Boolean disableSprints) {
    this.disableSprints = disableSprints;
    return this;
  }

   /**
   * Get disableSprints
   * @return disableSprints
  **/
  @Schema(description = "")
  public Boolean isDisableSprints() {
    return disableSprints;
  }

  public void setDisableSprints(Boolean disableSprints) {
    this.disableSprints = disableSprints;
  }

  public SprintsSettings explicitQuery(String explicitQuery) {
    this.explicitQuery = explicitQuery;
    return this;
  }

   /**
   * Get explicitQuery
   * @return explicitQuery
  **/
  @Schema(description = "")
  public String getExplicitQuery() {
    return explicitQuery;
  }

  public void setExplicitQuery(String explicitQuery) {
    this.explicitQuery = explicitQuery;
  }

  public SprintsSettings sprintSyncField(CustomField sprintSyncField) {
    this.sprintSyncField = sprintSyncField;
    return this;
  }

   /**
   * Get sprintSyncField
   * @return sprintSyncField
  **/
  @Schema(description = "")
  public CustomField getSprintSyncField() {
    return sprintSyncField;
  }

  public void setSprintSyncField(CustomField sprintSyncField) {
    this.sprintSyncField = sprintSyncField;
  }

  public SprintsSettings hideSubtasksOfCards(Boolean hideSubtasksOfCards) {
    this.hideSubtasksOfCards = hideSubtasksOfCards;
    return this;
  }

   /**
   * Get hideSubtasksOfCards
   * @return hideSubtasksOfCards
  **/
  @Schema(description = "")
  public Boolean isHideSubtasksOfCards() {
    return hideSubtasksOfCards;
  }

  public void setHideSubtasksOfCards(Boolean hideSubtasksOfCards) {
    this.hideSubtasksOfCards = hideSubtasksOfCards;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SprintsSettings sprintsSettings = (SprintsSettings) o;
    return Objects.equals(this.isExplicit, sprintsSettings.isExplicit) &&
        Objects.equals(this.cardOnSeveralSprints, sprintsSettings.cardOnSeveralSprints) &&
        Objects.equals(this.defaultSprint, sprintsSettings.defaultSprint) &&
        Objects.equals(this.disableSprints, sprintsSettings.disableSprints) &&
        Objects.equals(this.explicitQuery, sprintsSettings.explicitQuery) &&
        Objects.equals(this.sprintSyncField, sprintsSettings.sprintSyncField) &&
        Objects.equals(this.hideSubtasksOfCards, sprintsSettings.hideSubtasksOfCards) &&
        Objects.equals(this.id, sprintsSettings.id) &&
        Objects.equals(this.$type, sprintsSettings.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isExplicit, cardOnSeveralSprints, defaultSprint, disableSprints, explicitQuery, sprintSyncField, hideSubtasksOfCards, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SprintsSettings {\n");
    
    sb.append("    isExplicit: ").append(toIndentedString(isExplicit)).append("\n");
    sb.append("    cardOnSeveralSprints: ").append(toIndentedString(cardOnSeveralSprints)).append("\n");
    sb.append("    defaultSprint: ").append(toIndentedString(defaultSprint)).append("\n");
    sb.append("    disableSprints: ").append(toIndentedString(disableSprints)).append("\n");
    sb.append("    explicitQuery: ").append(toIndentedString(explicitQuery)).append("\n");
    sb.append("    sprintSyncField: ").append(toIndentedString(sprintSyncField)).append("\n");
    sb.append("    hideSubtasksOfCards: ").append(toIndentedString(hideSubtasksOfCards)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
