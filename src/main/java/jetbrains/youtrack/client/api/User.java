/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.List;

import static com.atlassian.renderer.v2.components.HtmlEscaper.escapeAll;

/**
 * Represents a user in YouTrack. Please note that the read-only properties of a user account, like              credentials, or email and so on, you can only change in               &lt;a href&#x3D;\&quot;https://www.jetbrains.com/help/youtrack/devportal/?Hub-REST-API\&quot;&gt;Hub REST API&lt;/a&gt;.
 */
@Schema(description = "Represents a user in YouTrack. Please note that the read-only properties of a user account, like              credentials, or email and so on, you can only change in               <a href=\"https://www.jetbrains.com/help/youtrack/devportal/?Hub-REST-API\">Hub REST API</a>.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
  @JsonSubTypes.Type(value = Me.class, name = "Me"),
  @JsonSubTypes.Type(value = VcsUnresolvedUser.class, name = "VcsUnresolvedUser"),
})

public class User {
  @JsonProperty("login")
  private String login = null;

  @JsonProperty("fullName")
  private String fullName = null;

  @JsonProperty("email")
  private String email = null;

  @JsonProperty("jabberAccountName")
  private String jabberAccountName = null;

  @JsonProperty("ringId")
  private String ringId = null;

  @JsonProperty("guest")
  private Boolean guest = null;

  @JsonProperty("online")
  private Boolean online = null;

  @JsonProperty("banned")
  private Boolean banned = null;

  @JsonProperty("tags")
  private List<IssueTag> tags = null;

  @JsonProperty("savedQueries")
  private List<SavedQuery> savedQueries = null;

  @JsonProperty("avatarUrl")
  private String avatarUrl = null;

  @JsonProperty("profiles")
  private UserProfiles profiles = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

   /**
   * Get login
   * @return login
  **/
  @Schema(description = "")
  public String getLogin() {
    return escapeAll(login, true);
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @Schema(description = "")
  public String getFullName() {
    return escapeAll(fullName, true);
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(description = "")
  public String getEmail() {
    return email;
  }

   /**
   * Get jabberAccountName
   * @return jabberAccountName
  **/
  @Schema(description = "")
  public String getJabberAccountName() {
    return jabberAccountName;
  }

   /**
   * Get ringId
   * @return ringId
  **/
  @Schema(description = "")
  public String getRingId() {
    return ringId;
  }

   /**
   * Get guest
   * @return guest
  **/
  @Schema(description = "")
  public Boolean isGuest() {
    return guest;
  }

   /**
   * Get online
   * @return online
  **/
  @Schema(description = "")
  public Boolean isOnline() {
    return online;
  }

   /**
   * Get banned
   * @return banned
  **/
  @Schema(description = "")
  public Boolean isBanned() {
    return banned;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public List<IssueTag> getTags() {
    return tags;
  }

   /**
   * Get savedQueries
   * @return savedQueries
  **/
  @Schema(description = "")
  public List<SavedQuery> getSavedQueries() {
    return savedQueries;
  }

   /**
   * Get avatarUrl
   * @return avatarUrl
  **/
  @Schema(description = "")
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public User profiles(UserProfiles profiles) {
    this.profiles = profiles;
    return this;
  }

   /**
   * Get profiles
   * @return profiles
  **/
  @Schema(description = "")
  public UserProfiles getProfiles() {
    return profiles;
  }

  public void setProfiles(UserProfiles profiles) {
    this.profiles = profiles;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.login, user.login) &&
        Objects.equals(this.fullName, user.fullName) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.jabberAccountName, user.jabberAccountName) &&
        Objects.equals(this.ringId, user.ringId) &&
        Objects.equals(this.guest, user.guest) &&
        Objects.equals(this.online, user.online) &&
        Objects.equals(this.banned, user.banned) &&
        Objects.equals(this.tags, user.tags) &&
        Objects.equals(this.savedQueries, user.savedQueries) &&
        Objects.equals(this.avatarUrl, user.avatarUrl) &&
        Objects.equals(this.profiles, user.profiles) &&
        Objects.equals(this.id, user.id) &&
        Objects.equals(this.$type, user.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(login, fullName, email, jabberAccountName, ringId, guest, online, banned, tags, savedQueries, avatarUrl, profiles, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    jabberAccountName: ").append(toIndentedString(jabberAccountName)).append("\n");
    sb.append("    ringId: ").append(toIndentedString(ringId)).append("\n");
    sb.append("    guest: ").append(toIndentedString(guest)).append("\n");
    sb.append("    online: ").append(toIndentedString(online)).append("\n");
    sb.append("    banned: ").append(toIndentedString(banned)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    savedQueries: ").append(toIndentedString(savedQueries)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
